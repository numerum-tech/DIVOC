// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address Address
//
// Indian address format
// Example: [{"addressLine1":"no. 23, some lane, some road","addressLine2":"some nagar","district":"bangalore south","pincode":"560000","state":"Karnataka"}]
//
// swagger:model Address
type Address struct {

	// address line1
	// Required: true
	AddressLine1 *string `json:"addressLine1"`

	// address line2
	// Required: true
	AddressLine2 *string `json:"addressLine2"`

	// district
	// Required: true
	District *string `json:"district"`

	// pincode
	// Required: true
	Pincode *string `json:"pincode"`

	// The state schema
	//
	// State of address
	// Example: ["Karnataka"]
	// Required: true
	State *string `json:"state"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistrict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePincode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("addressLine1", "body", m.AddressLine1); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateAddressLine2(formats strfmt.Registry) error {

	if err := validate.Required("addressLine2", "body", m.AddressLine2); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateDistrict(formats strfmt.Registry) error {

	if err := validate.Required("district", "body", m.District); err != nil {
		return err
	}

	return nil
}

func (m *Address) validatePincode(formats strfmt.Registry) error {

	if err := validate.Required("pincode", "body", m.Pincode); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
