// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMedicineRequest create medicine request
//
// swagger:model CreateMedicineRequest
type CreateMedicineRequest struct {

	// dose intervals
	DoseIntervals []*CreateMedicineRequestDoseIntervalsItems0 `json:"doseIntervals"`

	// Effective until n days after the last dose
	EffectiveUntil int64 `json:"effectiveUntil,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Indicative price if fixed or max price available.
	Price float64 `json:"price,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// status
	// Enum: [Active Inactive Blocked]
	Status string `json:"status,omitempty"`

	// vaccination mode
	// Enum: [muscular injection oral nasal]
	VaccinationMode string `json:"vaccinationMode,omitempty"`
}

// Validate validates this create medicine request
func (m *CreateMedicineRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDoseIntervals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaccinationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMedicineRequest) validateDoseIntervals(formats strfmt.Registry) error {

	if swag.IsZero(m.DoseIntervals) { // not required
		return nil
	}

	for i := 0; i < len(m.DoseIntervals); i++ {
		if swag.IsZero(m.DoseIntervals[i]) { // not required
			continue
		}

		if m.DoseIntervals[i] != nil {
			if err := m.DoseIntervals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("doseIntervals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createMedicineRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","Blocked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMedicineRequestTypeStatusPropEnum = append(createMedicineRequestTypeStatusPropEnum, v)
	}
}

const (

	// CreateMedicineRequestStatusActive captures enum value "Active"
	CreateMedicineRequestStatusActive string = "Active"

	// CreateMedicineRequestStatusInactive captures enum value "Inactive"
	CreateMedicineRequestStatusInactive string = "Inactive"

	// CreateMedicineRequestStatusBlocked captures enum value "Blocked"
	CreateMedicineRequestStatusBlocked string = "Blocked"
)

// prop value enum
func (m *CreateMedicineRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createMedicineRequestTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateMedicineRequest) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var createMedicineRequestTypeVaccinationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["muscular injection","oral","nasal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMedicineRequestTypeVaccinationModePropEnum = append(createMedicineRequestTypeVaccinationModePropEnum, v)
	}
}

const (

	// CreateMedicineRequestVaccinationModeMuscularInjection captures enum value "muscular injection"
	CreateMedicineRequestVaccinationModeMuscularInjection string = "muscular injection"

	// CreateMedicineRequestVaccinationModeOral captures enum value "oral"
	CreateMedicineRequestVaccinationModeOral string = "oral"

	// CreateMedicineRequestVaccinationModeNasal captures enum value "nasal"
	CreateMedicineRequestVaccinationModeNasal string = "nasal"
)

// prop value enum
func (m *CreateMedicineRequest) validateVaccinationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createMedicineRequestTypeVaccinationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateMedicineRequest) validateVaccinationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.VaccinationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateVaccinationModeEnum("vaccinationMode", "body", m.VaccinationMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMedicineRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMedicineRequest) UnmarshalBinary(b []byte) error {
	var res CreateMedicineRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateMedicineRequestDoseIntervalsItems0 create medicine request dose intervals items0
//
// swagger:model CreateMedicineRequestDoseIntervalsItems0
type CreateMedicineRequestDoseIntervalsItems0 struct {

	// max
	Max int64 `json:"max,omitempty"`

	// min
	Min int64 `json:"min,omitempty"`

	// osid
	Osid string `json:"osid,omitempty"`
}

// Validate validates this create medicine request dose intervals items0
func (m *CreateMedicineRequestDoseIntervalsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateMedicineRequestDoseIntervalsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMedicineRequestDoseIntervalsItems0) UnmarshalBinary(b []byte) error {
	var res CreateMedicineRequestDoseIntervalsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
